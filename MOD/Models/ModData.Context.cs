//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace MOD.Models
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    using System.Text;
    using System.Security.Cryptography;
    using System.IO;
    using System.Configuration;

    public partial class MODEntities : DbContext
    {
        public MODEntities()
          : base("name=MODEntities")
          //: base(DecryptData(ConfigurationManager.ConnectionStrings["MODEntities"].ConnectionString))
        {
        }


        public static string DecryptData(string strData)
        {
            byte[] key = { };// Key   
            byte[] IV = { 10, 20, 30, 40, 50, 60, 70, 80 };
            byte[] inputByteArray = new byte[strData.Length];
            strData = strData.Replace("%2b", "+");

            try
            {
                key = Encoding.UTF8.GetBytes("W@!dghDW");
                DESCryptoServiceProvider ObjDES = new DESCryptoServiceProvider();
                inputByteArray = Convert.FromBase64String(strData);

                MemoryStream Objmst = new MemoryStream();
                CryptoStream Objcs = new CryptoStream(Objmst, ObjDES.CreateDecryptor(key, IV), CryptoStreamMode.Write);
                Objcs.Write(inputByteArray, 0, inputByteArray.Length);
                Objcs.FlushFinalBlock();

                Encoding encoding = Encoding.UTF8;
                return encoding.GetString(Objmst.ToArray());
            }
            catch (System.Exception ex)
            {
                throw ex;
            }
        }
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public virtual DbSet<tbl_tblAON> tbl_tblAON { get; set; }
        public virtual DbSet<tbl_tblTimelineForProcurement> tbl_tblTimelineForProcurement { get; set; }
        public virtual DbSet<tbl_tblVendor> tbl_tblVendor { get; set; }
        public virtual DbSet<tbl_tblVendorCategory> tbl_tblVendorCategory { get; set; }
        public virtual DbSet<acq_department_master> acq_department_master { get; set; }
        public virtual DbSet<tbl_mst_Project> tbl_mst_Project { get; set; }
        public virtual DbSet<tbl_trn_tryProject> tbl_trn_tryProject { get; set; }
        public virtual DbSet<vw_Chart2> vw_Chart2 { get; set; }
        public virtual DbSet<vw_ChartFirst> vw_ChartFirst { get; set; }
        public virtual DbSet<vw_Grid2> vw_Grid2 { get; set; }
        public virtual DbSet<vw_GridFirst> vw_GridFirst { get; set; }
        public virtual DbSet<vw_assignofTask> vw_assignofTask { get; set; }
        public virtual DbSet<tbl_trn_UpdateStausDummy> tbl_trn_UpdateStausDummy { get; set; }
        public virtual DbSet<temp_dashboardproject> temp_dashboardproject { get; set; }
        public virtual DbSet<acq_rfp_VendorsDetails> acq_rfp_VendorsDetails { get; set; }
        public virtual DbSet<acq_meeting_master> acq_meeting_master { get; set; }
        public virtual DbSet<acq_trials> acq_trials { get; set; }
        public virtual DbSet<acq_rfp_vendors> acq_rfp_vendors { get; set; }
        public virtual DbSet<acq_project_status_timelines> acq_project_status_timelines { get; set; }
        public virtual DbSet<acq_rfp_master> acq_rfp_master { get; set; }
        public virtual DbSet<acq_project_status_1> acq_project_status_1 { get; set; }
        public virtual DbSet<ChartReportOnClick> ChartReportOnClicks { get; set; }
        public virtual DbSet<ReportMileStonebyMonth> ReportMileStonebyMonths { get; set; }
        public virtual DbSet<TimeLineReport1> TimeLineReport1 { get; set; }
        public virtual DbSet<Service_WiseReport> Service_WiseReport { get; set; }
        public virtual DbSet<acq_projectstage_applicability> acq_projectstage_applicability { get; set; }
        public virtual DbSet<tbl_mst_Template> tbl_mst_Template { get; set; }
        public virtual DbSet<temp_dashboard> temp_dashboard { get; set; }
        public virtual DbSet<acq_project_status_pendingstage> acq_project_status_pendingstage { get; set; }
        public virtual DbSet<tbl_trn_tryProject1> tbl_trn_tryProject1 { get; set; }
        public virtual DbSet<temp_BF> temp_BF { get; set; }
        public virtual DbSet<acq_policy> acq_policy { get; set; }
        public virtual DbSet<tbl_tbl_User> tbl_tbl_User { get; set; }
        public virtual DbSet<acq_audit_trail> acq_audit_trail { get; set; }
        public virtual DbSet<acq_section_master> acq_section_master { get; set; }
        public virtual DbSet<vw_userDetail> vw_userDetail { get; set; }
        public virtual DbSet<acq_project_master> acq_project_master { get; set; }
        public virtual DbSet<tbl_master_formMenu> tbl_master_formMenu { get; set; }
        public virtual DbSet<tbl_Master_Role> tbl_Master_Role { get; set; }
        public virtual DbSet<tbl_trn_OTP> tbl_trn_OTP { get; set; }
    
        public virtual ObjectResult<temp_dashboard> PROC_DASHBOARD_DATA(string categorisation, string service)
        {
            var categorisationParameter = categorisation != null ?
                new ObjectParameter("categorisation", categorisation) :
                new ObjectParameter("categorisation", typeof(string));
    
            var serviceParameter = service != null ?
                new ObjectParameter("service", service) :
                new ObjectParameter("service", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<temp_dashboard>("PROC_DASHBOARD_DATA", categorisationParameter, serviceParameter);
        }
    
        public virtual ObjectResult<temp_dashboard> PROC_DASHBOARD_DATA(string categorisation, string service, MergeOption mergeOption)
        {
            var categorisationParameter = categorisation != null ?
                new ObjectParameter("categorisation", categorisation) :
                new ObjectParameter("categorisation", typeof(string));
    
            var serviceParameter = service != null ?
                new ObjectParameter("service", service) :
                new ObjectParameter("service", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<temp_dashboard>("PROC_DASHBOARD_DATA", mergeOption, categorisationParameter, serviceParameter);
        }
    
        public virtual ObjectResult<PROC_PRODUCT_DESCRITPTION_Result> PROC_PRODUCT_DESCRITPTION(string taskid, string stageid, string type, Nullable<System.DateTime> date, string categorisation, string service)
        {
            var taskidParameter = taskid != null ?
                new ObjectParameter("taskid", taskid) :
                new ObjectParameter("taskid", typeof(string));
    
            var stageidParameter = stageid != null ?
                new ObjectParameter("stageid", stageid) :
                new ObjectParameter("stageid", typeof(string));
    
            var typeParameter = type != null ?
                new ObjectParameter("Type", type) :
                new ObjectParameter("Type", typeof(string));
    
            var dateParameter = date.HasValue ?
                new ObjectParameter("Date", date) :
                new ObjectParameter("Date", typeof(System.DateTime));
    
            var categorisationParameter = categorisation != null ?
                new ObjectParameter("categorisation", categorisation) :
                new ObjectParameter("categorisation", typeof(string));
    
            var serviceParameter = service != null ?
                new ObjectParameter("service", service) :
                new ObjectParameter("service", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<PROC_PRODUCT_DESCRITPTION_Result>("PROC_PRODUCT_DESCRITPTION", taskidParameter, stageidParameter, typeParameter, dateParameter, categorisationParameter, serviceParameter);
        }
    
        public virtual ObjectResult<temp_dashboard> DASHBOARDDATA(string categorisation, string service)
        {
            var categorisationParameter = categorisation != null ?
                new ObjectParameter("categorisation", categorisation) :
                new ObjectParameter("categorisation", typeof(string));
    
            var serviceParameter = service != null ?
                new ObjectParameter("service", service) :
                new ObjectParameter("service", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<temp_dashboard>("DASHBOARDDATA", categorisationParameter, serviceParameter);
        }
    
        public virtual ObjectResult<temp_dashboard> DASHBOARDDATA(string categorisation, string service, MergeOption mergeOption)
        {
            var categorisationParameter = categorisation != null ?
                new ObjectParameter("categorisation", categorisation) :
                new ObjectParameter("categorisation", typeof(string));
    
            var serviceParameter = service != null ?
                new ObjectParameter("service", service) :
                new ObjectParameter("service", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<temp_dashboard>("DASHBOARDDATA", mergeOption, categorisationParameter, serviceParameter);
        }
    
        public virtual ObjectResult<PROC_DASHBOARD_First_CountGrid_Result> PROC_DASHBOARD_First_CountGrid(Nullable<decimal> stageid, Nullable<System.DateTime> date, string categorisation, string service)
        {
            var stageidParameter = stageid.HasValue ?
                new ObjectParameter("stageid", stageid) :
                new ObjectParameter("stageid", typeof(decimal));
    
            var dateParameter = date.HasValue ?
                new ObjectParameter("date", date) :
                new ObjectParameter("date", typeof(System.DateTime));
    
            var categorisationParameter = categorisation != null ?
                new ObjectParameter("categorisation", categorisation) :
                new ObjectParameter("categorisation", typeof(string));
    
            var serviceParameter = service != null ?
                new ObjectParameter("service", service) :
                new ObjectParameter("service", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<PROC_DASHBOARD_First_CountGrid_Result>("PROC_DASHBOARD_First_CountGrid", stageidParameter, dateParameter, categorisationParameter, serviceParameter);
        }
    
        public virtual ObjectResult<prc_Getvendcatwise_report_Result> prc_Getvendcatwise_report()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<prc_Getvendcatwise_report_Result>("prc_Getvendcatwise_report");
        }
    
        public virtual ObjectResult<GetselectedVendors_Result> GetselectedVendors()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetselectedVendors_Result>("GetselectedVendors");
        }
    }
}
